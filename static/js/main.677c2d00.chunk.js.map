{"version":3,"sources":["axios.jsx","Row.jsx","requests.jsx","Banner.jsx","Nav.jsx","App.jsx","serviceWorker.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movie","setMovie","trailerUrl","setTrailerUrl","useEffect","a","get","req","data","results","fetchData","className","map","movies","key","id","onClick","movieTrailer","name","then","url","urlParams","URLSearchParams","URL","search","catch","error","console","log","handleClick","src","poster_path","backdrop_path","alt","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchDocumentaries","Banner","str","n","res","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","original_name","overview","substr","Nav","show","setShow","window","addEventListener","scrollY","removeEventListener","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.677c2d00.chunk.js","sourcesContent":["import axios from \"axios\";\r\n//https://api.themoviedb.org/3/movie/550?api_key=3476533434c73afdccc3b438dbd24159\r\n\r\n//org/3 tk api same hai baqi key ay gii phr jo movies chaiyay wo\r\n\r\nconst instance = axios.create({\r\n    baseURL: \"https://api.themoviedb.org/3\",\r\n});\r\n\r\n\r\n//instance.get('/abc') = https://api.themoviedb.org/3/abc yay hojay ga \r\n\r\nexport default instance;","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios'; //default hai to koi bhin askta\r\nimport YouTube from 'react-youtube';\r\nimport movieTrailer from 'movie-trailer';\r\n\r\nconst image_Url = \"https://image.tmdb.org/t/p/original/\";\r\nconst Row = ({title, fetchUrl , isLargeRow})=>{\r\n    const [movie,setMovie]=useState([]); //empty movie array\r\n  //  console.log(movie);\r\n    //jab to yay row load ho reauest ay every load\r\n    const [trailerUrl, setTrailerUrl]=useState(\"\");\r\n   \r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const req = await axios.get(fetchUrl);\r\n           // console.log(req);\r\n            setMovie(req.data.results);\r\n            return req;\r\n        }\r\n        fetchData();\r\n\r\n    },[fetchUrl]);//jb bhi fetch change hpga update hota rahay ga\r\n\r\n    const opts = {\r\n        height: '390',\r\n        width: '100%',\r\n        playerVars: {\r\n          // https://developers.google.com/youtube/player_parameters\r\n          autoplay: 1,\r\n        },\r\n      };\r\n\r\n      const handleClick = (movies)=>{\r\n          if(trailerUrl){\r\n              setTrailerUrl(\"\");\r\n          }else{\r\n              movieTrailer(movies?.name || \"\")\r\n              .then((url)=>{\r\n               // https://www.youtube.com/watch?v=XtMThy8QKqU&t=9742s\r\n               const urlParams = new URLSearchParams(new URL(url).search); //iss sy yay ay ga XtMThy8QKqU&t phr urlsearch params me wrap kr gy\r\n               setTrailerUrl(urlParams.get('v'));  //v=XtMThy8QKqU  v ki value ay gi\r\n            }).catch((error)=>console.log(error));\r\n          }\r\n\r\n      };\r\n\r\n    return(\r\n        <div className=\"row\">\r\n        <h2>{title}</h2>\r\n        <div className=\"row__posters\">\r\n            {\r\n                movie.map(movies=>(\r\n                    <img key={movies.id} \r\n                    onClick={()=>handleClick(movies)}\r\n                    className={`row_image ${isLargeRow?\"row_large\":null}`} \r\n                    src={`${image_Url}${isLargeRow? movies.poster_path:movies.backdrop_path}`} \r\n                    alt={movie.name}/>\r\n                ))\r\n            }\r\n        </div>\r\n        {/* XtMThy8QKqU */}\r\n        {trailerUrl?<YouTube videoId={trailerUrl} opts={opts}/>:null}\r\n        </div>\r\n    );\r\n};\r\nexport default Row;","const API_KEY = \"3476533434c73afdccc3b438dbd24159\";\r\n\r\nconst requests = {\r\n    fetchTrending: `trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals: `/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchDocumentaries: `/discover/movie?api_key=${API_KEY}&with_genres=99`,\r\n}\r\n\r\nexport default requests;","import React, { useState, useEffect } from 'react';\r\nimport axios from './axios';\r\nimport requests from './requests';\r\nconst Banner = ()=>{\r\n    const [movie,setMovie] = useState([]);\r\n   console.log(movie);\r\n    useEffect(()=>{\r\n        async function fetchData(){\r\n            const res = await axios.get(requests.fetchNetflixOriginals);        \r\n         //  console.log(res.data.results[Math.floor(Math.random()*res.data.results.length-1)])\r\n           setMovie(res.data.results[Math.floor(Math.random()*res.data.results.length-1)])\r\n         \r\n            return res;\r\n\r\n        }\r\n        fetchData();\r\n\r\n    },[]);\r\n\r\n    function truncate(str,n){\r\n        return str?.length > n ? str.substr(0,n-1) + \".....\" : str;\r\n    }\r\n\r\n    return(\r\n        <header className=\"banner\"\r\n         style={{\r\n             backgroundSize:\"cover\",\r\n             backgroundImage: `url(\"https://image.tmdb.org/t/p/original/${movie?.backdrop_path}\")`,\r\n             backgroundPosition:\"center center\"\r\n         }}\r\n        \r\n        >\r\n            <div className=\"banner_content\">\r\n            <h1 className=\"banner_title\">{movie?.title ||movie?.name || movie?.original_name}</h1>\r\n            <div className=\"banner_buttons\">\r\n                <button className=\"banner_button\">Play</button>\r\n                <button className=\"banner_button\">My List</button>\r\n            </div>\r\n            <h1 className=\"banner_des\">\r\n                {truncate(movie?.overview,150)}\r\n            </h1>\r\n            \r\n\r\n            </div>\r\n            <div className=\"banner_fade\">\r\n\r\n            </div>\r\n        </header>\r\n    );\r\n};\r\nexport default Banner;","import React, { useEffect, useState } from 'react';\r\n\r\nconst Nav=()=>{\r\n    const [show, setShow]=useState(false);\r\n    useEffect(()=>{\r\n        window.addEventListener(\"scroll\",()=>{\r\n            if(window.scrollY>100){\r\n                setShow(true)\r\n\r\n            }else setShow(false);\r\n        });\r\n        return()=>{\r\n            window.removeEventListener(\"scroll\");\r\n        }\r\n    },[]);\r\n    return(\r\n        <div className={`nav ${show?\"nav_black\":null}`}>\r\n        <img className=\"nav_logo\" \r\n        src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/0/08/Netflix_2015_logo.svg/1198px-Netflix_2015_logo.svg.png\" \r\n        alt=\"logo\"/>\r\n        <img className=\"nav_avatar\"\r\n        src=\"https://i.pinimg.com/originals/0d/dc/ca/0ddccae723d85a703b798a5e682c23c1.png\"\r\n        alt=\"avatar logo\"\r\n        />    \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Nav;","import React from 'react';\r\nimport Row from './Row';\r\nimport requests from './requests';\r\nimport Banner from './Banner';\r\nimport Nav from './Nav';\r\n\r\nconst  App =()=>{\r\n    return(\r\n        <>\r\n            <div className=\"app\">\r\n                <Nav/>\r\n                <Banner/>\r\n                <Row isLargeRow title=\"Netflix Original\" fetchUrl={requests.fetchNetflixOriginals}/>\r\n                <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending} />\r\n                <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies} />\r\n                <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies} />\r\n                <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies} />\r\n                <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated} />\r\n                <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies} />\r\n                <Row title=\"Documentaries\" fetchUrl={requests.fetchDocumentaries} />\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n"],"sourceRoot":""}